/*
var parser = require('parser.js');
var jsonfile = require('jsonfile')
var file = '/var/KNX/KNX.json'
jsonfile.spaces = 4
*/

var fs = require("fs");
var app = require("../app.js");

var KnxFile = '/var/KNX/KNX.json';
fs.open(KnxFile, 'a+', function(err, fd)
{
	if (err)
	{
		return console.error(err);
	}
	console.log(KnxFile + " open for append");
});


// Receive and decode the KNX packet

var KnxLength;

var KnxCtrlPrio;
var KnxCtrlRep;

var KnxSendArea;
var KnxSendLine;
var KnxSendDev;

var KnxDestArea;
var KnxDestLine;
var KnxDestHex;
var KnxDestDev;
var KnxDestGroup;

var KnxRouting;
var KnxCount;
var KnxPdu;

var KnxData="00000000000000000000";
var KnxDataStr="00000000000000000000";

var KnxCheck;

exports.KnxPacketDecode = function(data)
{
	KnxLength = data[0];

	if((KnxLength>0) && (KnxLength<16) && (KnxLength===(data.length-1)))
	{
		var Packet="";
		
		for (var i=1; i <= KnxLength; i++)
		{
			Packet=Packet + " " + decToHex(data[i]);
		}
		
		// Debug
		console.log("--------------------------------------------------------------------------------------------------");
		console.log("---> RX telegram of: " + KnxLength + " bytes at " + ISODateString());
		console.log(Packet);
		// Debug

		if(KnxLength>=9)
		{
			KnxCtrlPrio = decToBit(data[1],2) + decToBit(data[1],3)*2; // Priority: control byte bit 3-2 
			KnxCtrlRep = decToBit(data[1],5); // 0=repeated
			KnxSendArea = decToBit(data[2],4) + decToBit(data[2],5)*2 + decToBit(data[2],6)*4 + decToBit(data[2],7)*8; // Sender Area
			KnxSendLine = decToBit(data[2],0) + decToBit(data[2],1)*2 + decToBit(data[2],2)*4 + decToBit(data[2],3)*8; // Sender Line
			KnxSendDev = data[3];	// Sender Device
		
			KnxDestArea = decToBit(data[4],4) + decToBit(data[4],5)*2 + decToBit(data[4],6)*4 + decToBit(data[4],7)*8; // Destination Area
			KnxDestLine = decToBit(data[4],0) + decToBit(data[4],1)*2 + decToBit(data[4],2)*4 + decToBit(data[4],3)*8; // Destination Line
			KnxDestHex = data[4];	// Destination Area as single HEX byte
			KnxDestDev = data[5];	// Destination device
			KnxDestGroup = decToBit(data[6],7); // Address: 0=device 1=group
			KnxRouting = decToBit(data[6],4) + decToBit(data[6],5)*2 + decToBit(data[6],6)*4;
			KnxCount = decToBit(data[6],0) + decToBit(data[6],1)*2 + decToBit(data[6],2)*4 + decToBit(data[6],3)*8; // data counter 0-15
			KnxPdu = data[7];
		
			KnxDataStr="";
			KnxData=0;
			var Payload="";
		
			for(var i=0; i<KnxCount; i++)
			{
				KnxData[i]=data[8+i];
				Payload=Payload + " " + decToHex(data[8+i]);
			}
		
			KnxCheck = data[8+KnxCount];	//last byte is the checksum

			/* Debug
			console.log(Packet);
			console.log("Priority:" + KnxCtrlPrio+ " - Repetion:" + KnxCtrlRep );
			console.log("Send Area:" + KnxSendArea + " - Send Line:" + KnxSendLine + " - Send Dev:" + KnxSendDev);
			console.log("Dest Area:" + KnxDestArea + " - Dest Line:" + KnxDestLine + " - Dest Dev:" + KnxDestDev + " - Dest Group:" + KnxDestGroup);
			console.log("Routing:" + KnxRouting + " - Counter:" + KnxCount + " - PDU:" + KnxPdu);
			console.log("Data:" + Payload+" hex");
			console.log("Checksum:" + KnxCheck);
			Debug*/
		
			KNXdecoded = 
			{
				'Date'		: ISODateString(),
				'Length' 	: KnxLength,
				'Prio'		: KnxCtrlPrio,
				'Rep'		: KnxCtrlRep,
				'SendArea'	: KnxSendArea,
				'SendLine'	: KnxSendLine,
				'SendDev'	: KnxSendDev,
				'DestArea'	: KnxDestArea,
				'DestLine'	: KnxDestLine,
				'DestHex'	: KnxDestHex,
				'DestDev'	: KnxDestDev,
				'DestGroup'	: KnxDestGroup,
				'Routing'	: KnxRouting,
				'Count'		: KnxCount,
				'Pdu'		: KnxPdu,
				'Payload'	: Payload,
				'Check'		: KnxCheck,
				'Telegram'	: Packet,
				'Dawn'		: hsorge,
				'Dusk'		: htram,
				'Lat'		: Latit,
				'Lon'		: Longi
			}
			
			if(CLIENT!=0)
			{
				CLIENT.emit('RxEvent', JSON.stringify(KNXdecoded));
			}

			fs.appendFile(KnxFile, JSON.stringify(KNXdecoded,null, 4)+'\r', function(err) 
			{
				if (err) 
				{
					return console.error(err);
				}	
			});
		}
	}
}

function decToHex(Dec)
{//return HEX value 0 padded
	var dataHex = ("00" + (Dec.toString(16))).slice(-2);
	return dataHex.toUpperCase();
}

function decToBit(Dec, Pos)
{//return bit value in a precise position
	var dataBin = ("00000000" + (Dec.toString(2))).slice(-8); //zero pad
	Pos=Math.abs(Pos-7); // reverse order
	return parseInt(dataBin[Pos]);
}

exports.KnxInit = function()
{
	KnxPort.write("@MX");		//KNXgate HEX mode
  	var end = Date.now() + 500
	while (Date.now() < end) ;
	KnxPort.write("@Ae40C");	//exclude group 0C from logging (unknown device)
	var end = Date.now() + 500
	while (Date.now() < end) ;
	KnxPort.write("@b");		//flush KNXgate buffer
	//ResetComm();				//flush RX buffer
	var end = Date.now() + 500
	while (Date.now() < end) ;
	KnxPort.write("@l");		//start receiving data in interrupt mode. Comment line for polling mode
}


/*-----------------------------------------------------------------------------*/
WFAflag = 0;
WFAcount = 0;
WFAtime = 0;
waitForAnswer = function()
{// initialize the counting for no answer at all from peripherals
  WFAflag = 1;  // is waiting
  WFAtime = Date.now(); // start timeout counting
};

answerReceived = function()
{// reset count when full packet received correctly
  WFAflag = 0;  // no more waiting
  WFAcount = 0; // reset timeouts count
  RxStatus = 0;
  Parser();      // decode ready message packet 
};


/*-----------------------------------------------------------------------------*/
MAX_BUFF = 25; // buffer size
var TxBuff = new Buffer(MAX_BUFF); // TX buffer 

exports.txTelegram = function(Line, Dev, Cmd, Count)
{

    var TxChkSum = 0;
    var indx=2; 
 
    TxBuff.writeUInt8(0XB4,++indx) ;
    TxBuff.writeUInt8(0X11,++indx);       
    TxBuff.writeUInt8(0XF0,++indx) ;
    TxBuff.writeUInt8(Line,++indx);   
    TxBuff.writeUInt8(Dev,++indx) ;
    TxBuff.writeUInt8(0XE0+Count,++indx);       
    TxBuff.writeUInt8(0X00,++indx);
    TxBuff.writeUInt8(Cmd+0X80,++indx); 
    if(Count===2)
    {
    	TxBuff.writeUInt8(Dev,++indx); 
    } 
  
  	TxBuff.write("@",0) ;
    TxBuff.write("W",1);
    TxBuff.writeUInt8(indx-1,2);
    
  	var TxChkSum = 0;
    for (var i=3; i <= indx; i++)
    {// compute the checksum
      TxChkSum = (TxChkSum ^ TxBuff[i]) & 0xFF;
    }
	TxChkSum = ((TxChkSum ^ 0xFF)) & 0xFF;   
	 
    TxBuff.writeUInt8(TxChkSum,++indx);
    
	// Debug
	var Packet="";
    for (var i=3; i <= indx; i++)
	{
		Packet=Packet + " " + decToHex(TxBuff[i]);
	}
	
	console.log("--------------------------------------------------------------------------------------------------");
	console.log("<--- TX telegram of: " + (indx-2) + " bytes at " + ISODateString());
	console.log(Packet);
	// Debug
	

    KnxPort.write(TxBuff.slice(0, indx+1));
    
};

/*-----------------------------------------------------------------------------*/
startTime = 0; 
var elapsed;        // to manage timeout
RxCmd=0;

/*-----------------------------------------------------------------------------*/
ResetComm = function ()
{// reset the communication ports and status
  RxStatus=0; 
  WFAflag = 0;  // no more waiting for answer
  WFAcount = 0; // reset timeouts count
  RxChkSum=0;
  KnxPort.flush();
};

var RxTime = Date.now(); //debug

