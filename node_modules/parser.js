linearize = function()
{// bring the circular queue payload data in a linear buffer for a simpler parsing
  linBuff = new Buffer(MAX_BUFF); // Linear buffer 
  var ptr = RxPtrData;
  for (var i=0; i<cmdLen-1; i++)
  {
    if (++ptr >= MAX_BUFF) ptr = 0;
    linBuff[i] = RxBuff.readInt8(ptr);
  }
};

exports.b_dsNavParam = function ()
{// details on speed, current and position
  linearize();
  dsNav.posXmes = linBuff.readFloatBE(0);
  dsNav.posYmes = linBuff.readFloatBE(4);
  dsNav.velInt[0] = linBuff.readInt16BE(8);
  dsNav.velInt[1] = linBuff.readInt16BE(10);
  dsNav.velInt[2] = linBuff.readInt16BE(12);
  dsNav.velInt[3] = linBuff.readInt16BE(14);
  dsNav.ADCValue[0] = linBuff.readInt16BE(16);
  dsNav.ADCValue[1] = linBuff.readInt16BE(18);
  dsNav.ADCValue[2] = linBuff.readInt16BE(20);
  dsNav.ADCValue[3] = linBuff.readInt16BE(22);
  dsNav.stasisErr = linBuff.readInt8(24);
  dsNav.stasisAlarm = linBuff.readInt8(25);  
  
  // console.log(dsNav.velInt[0]+" "+dsNav.velInt[1]+" "+dsNav.velInt[2]+" "+dsNav.velInt[3]); // debug
};

exports.T_GpsTime = function ()
{// GPS time parameters
  linearize();

  GPS.year = linBuff.readInt16BE(0);
  GPS.month = linBuff.readInt8(2);
  GPS.day = linBuff.readInt8(3);
  GPS.hour = linBuff.readInt8(4);
  GPS.min = linBuff.readInt8(5);
  GPS.sec = linBuff.readInt16BE(6);
  
  //console.log(GPS.year+" "+GPS.month+" "+GPS.day+" ---- "+GPS.hour+":"+GPS.min+":"+GPS.sec)
};

exports.G_GpsService = function ()
{// GPS service parameters
  linearize();
  
  GPS.hdop = linBuff.readInt8(6)  / 5;
  GPS.svs = linBuff.readInt8(7);
  GPS.satIdList = linBuff.readInt32BE(8);
  GPS.ehpe = linBuff.readInt32BE(12)  / 100;
  //console.log(GPS.hdop+" "+GPS.svs+" "+GPS.satIdList+" "+GPS.ehpe); //debug

};

exports.K_GpsPos = function ()
{// GPS & IMU (DCM) parameters
  linearize();
  
  var Rad2Deg = 180/Math.PI;
  
  GPS.lat = linBuff.readInt32BE(0) / 10000000; 
  GPS.lon = linBuff.readInt32BE(4) / 10000000;
  GPS.alt = linBuff.readInt32BE(8) / 100;
  GPS.sog = linBuff.readInt16BE(12)/ 100;
  GPS.cog = linBuff.readInt16BE(14)/ 100;
  UDB4.rmat[0] = linBuff.readInt16BE(16);
  UDB4.rmat[1] = linBuff.readInt16BE(18);
  UDB4.rmat[2] = linBuff.readInt16BE(20);
  UDB4.rmat[3] = linBuff.readInt16BE(22);
  UDB4.rmat[4] = linBuff.readInt16BE(24);
  UDB4.rmat[5] = linBuff.readInt16BE(26);
  UDB4.rmat[6] = linBuff.readInt16BE(28);
  UDB4.rmat[7] = linBuff.readInt16BE(30);
  UDB4.rmat[8] = linBuff.readInt16BE(32);
  UDB4.udb_cpu_load = linBuff.readInt8(34);
  UDB4.YawOffset = linBuff.readInt16BE(35);
  
  UDB4.pitchRad = Math.asin(UDB4.rmat[7] / 16384.0); // RAD;
  UDB4.pitchDeg = UDB4.pitchRad * Rad2Deg;
  
  UDB4.rollRad = Math.atan2(- UDB4.rmat[6] , UDB4.rmat[8]);
  UDB4.rollDeg = UDB4.rollRad * Rad2Deg;
  
  UDB4.yawRad = Math.atan2(- UDB4.rmat[1] , UDB4.rmat[4]);
  UDB4.yawDeg = UDB4.yawRad * Rad2Deg; 
  
  UDB4.yawRelDef = UDB4.yawDeg - UDB4.YawOffset;
  
  //console.log(GPS.lat+" "+GPS.lon+" "+GPS.alt+" "+GPS.sog+" "+GPS.cog+" "+UDB4.YawOffset); //debug
  //console.log("Pitch: "+UDB4.pitchDeg+" Roll: "+UDB4.rollDeg+" Yaw: "+UDB4.yawDeg); //debug
};  

exports.L_LLS = function ()
{// values coming from Low Level Supervisor
  linearize();  
  LLS.batV[0] = linBuff.readInt8(0); // Battery level
  LLS.batV[1] = linBuff.readInt8(1);
  LLS.temp[0] = linBuff.readInt8(2); // Internal hulls temperature
  LLS.temp[1] = linBuff.readInt8(3); 
  
  // obstacle distance @ x degrees 
  // (http://www.guiott.com/QuadSonar/HR/LinoSonar.png)
  LLS.obst[0] = linBuff.readUInt8(4);  // LL Lef Left -52°
  LLS.obst[1] = linBuff.readUInt8(5);  // LC Left Center -27°
  LLS.obst[2] = linBuff.readUInt8(6);  // CL Center Left -12°
  LLS.obst[3] = linBuff.readUInt8(7);  // CC Center Center 0°
  LLS.obst[4] = linBuff.readUInt8(8);  // CR Center Right 12°
  LLS.obst[5] = linBuff.readUInt8(9);  // RC Right Center 27°
  LLS.obst[6] = linBuff.readUInt8(10); // RR Right Right 52°
  LLS.lPwrOff = linBuff.readUInt8(11);  // LLS -> HLS switch off. 0 = PowerOn, 1 = PowerOff
  LLS.obst[7] = linBuff.readUInt8(12);  // LL Lef Left -40°
  LLS.obst[8] = linBuff.readUInt8(13);  // CL Center Left -15°
  LLS.obst[9] = linBuff.readUInt8(14);  // CR Center Right 15°
  LLS.obst[10]= linBuff.readUInt8(15); // RR Right Right 40°
  //console.log(LLS.batV[0]+" "+LLS.batV[1]+" "+LLS.temp[0]+" "+LLS.temp[1]); //debug
  //console.log("LLS PowerOff= "+LLS.lPwrOff); //debug
};   
